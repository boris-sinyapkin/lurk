name: Build & Publish Nightly Release

on:
  push:
    branches:
      - '**'

env:
  CARGO_TERM_COLOR: always
  NIGHTLY_RELEASE_DIR: build/release

jobs:
  build-nightly-release:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl

    steps:
      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          rustup target add --toolchain stable ${{ matrix.target }}

      - name: Install cross
        run: |
          cargo install cross

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build ${{ matrix.target }}
        timeout-minutes: 120
        run: |
          cross build --target ${{ matrix.target }} --release

      - name: Prepare release
        run: |
          LURK_VERSION=$(grep -E '^version' Cargo.toml | awk '{print $3}' | sed 's/"//g')
          LURK_RELEASE_NAME=lurk-v${LURK_VERSION}-nightly-${{ matrix.target }}

          mkdir -p ${{ env.NIGHTLY_RELEASE_DIR }}
          mv target/${{ matrix.target }}/release/lurk ${{env.NIGHTLY_RELEASE_DIR}}/${LURK_RELEASE_NAME}

          echo "ref: $GITHUB_REF"                     > ${{ env.NIGHTLY_RELEASE_DIR }}/info.txt
          echo "commit: $GITHUB_SHA"                 >> ${{ env.NIGHTLY_RELEASE_DIR }}/info.txt
          echo "date: $(date +"%Y-%m-%dT%H:%M:%SZ")" >> ${{ env.NIGHTLY_RELEASE_DIR }}/info.txt

      - name: Update nightly release
        uses: pyTooling/Actions/releaser@main
        with:
          tag: nightly
          rm: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ env.NIGHTLY_RELEASE_DIR }}/*

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.NIGHTLY_RELEASE_DIR }}/*